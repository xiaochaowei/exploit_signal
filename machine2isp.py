import os
import scipy.io as sio
import numpy as np 
import psycopg2
def aggerate(signal):
	return signal.mean(0)
def fastrun():
	filename = os.sys.argv[1]
	d = sio.loadmat(filename)
	machine_list = d['machine_ids']
	signals = d['signal']
	(length, dim) = signals.shape

	machineList2isp = {}
	for row in open('machine_id2isp.csv', 'r').read().strip().split('\n'):
		machineList2isp[int(row.split('@@')[0])] = row.split('@@')[1].split('@:')
	isp2signal = {}
	machine2isp = {}
	print "load database finished!"
	count = 0
	for idx, machine_id in enumerate(machine_list[0]):
		if not machineList2isp.has_key(machine_id):
			count += 1 
			continue	
		isps = machineList2isp[machine_id]
		for isp in isps:
			#print isp
			if not isp2signal.has_key(isp):
				isp2signal[isp] = []
			isp2signal[isp].append(signals[idx])
	print """{0}/{1}""".format(count, length)
	print "match patching_data finished!"
	print "start aggerate"
	for key, signals in isp2signal.items():
		signal = aggerate(np.array(signals))
		isp2signal[key]= signal
	print "aggerate finished"
	with  open('distinct_isp.csv','r') as fid:#read isp file
		isp_list = fid.read().strip().split('\n')
	signals = []
	count = 0
	for isp in isp_list:
		isp = isp.replace("''", "'")
		if isp2signal.has_key(isp):
			signals.append(isp2signal[isp])
		else:
		#	print isp
			count += 1
			signals.append(np.zeros(dim))
	print "miss data" , count
	sio.savemat(os.sys.argv[2], {'signals': signals,'isp': isp_list })
def main():
	filename = os.sys.argv[1]
	d = sio.loadmat(filename)
	machine_list = d['machine_ids']
	signals = d['signal']
	(length, dim) = signals.shape
#	machine2idx = {}
#	for idx, machine_id in enumerate(machine_list[0]):
#		if machine2idx.has_key(machine_id):
#			print machine_id, idx 
#		machine2idx[machine_id] = idx
#	conn = psycopg2.connect(user = 'patch', port = '5433')
#	cursor = conn.cursor()
	isp2signal = {}
	machineList2isp = {}
	machine2isp = {}
	with open("machine_isp_filter", 'r') as fid:
		rows = fid.read().split('\n')
	for row in rows[0:-1]:
		tmp = row.split(',')
		if not machineList2isp.has_key(int(tmp[0])):
			machineList2isp[int(tmp[0])] = set()
		machineList2isp[int(tmp[0])].add(tmp[2])
	print "load database finished!"
	count = 0
	for idx, machine_id in enumerate(machine_list[0]):
		#print """process, {}/{}""".format(idx, length)
		#cursor.execute(""" SELECT isp, machine_id FROM machine_isp where machine_id in %s""", (tuple(machine_list[0][i:i+1000]),))
		if not machineList2isp.has_key(machine_id):
			count += 1 
			continue	
		isps = machineList2isp[machine_id]
		for isp in isps:
			#print isp
			if not isp2signal.has_key(isp):
				isp2signal[isp] = []
			isp2signal[isp].append(signals[idx])
			if not machine2isp.has_key(machine_id):
				machine2isp[machine_id] = []
			machine2isp[machine_id].append(isp)
	print """{0}/{1}""".format(count, length)
	print "match patching_data finished!"
	tmp_str = ""

	for key in machine2isp:
		tmp_str += str(key) + "@@" + "@:".join(machine2isp[key]) + "\n"
	with open("machine_id2isp.csv", 'w') as fid:
		fid.write(tmp_str)

#	for idx, machine_id  in enumerate(machine_list[0]):
#		if idx % 100 == 0:
#			print """process : {0}/{1} """.format(idx, length)
#		cursor.execute("""SELECT isp FROM machine_isp where machine_id = {0};  """.format(machine_id))	
#		for isp in cursor.fetchall():
			#print isp[0]
#			if not isp2signal.has_key(isp[0]):
#				isp2signal[isp[0]] = []
#			isp2signal[isp[0]].append(signals[idx])
	print "start aggerate"
	for key, signals in isp2signal.items():
		signal = aggerate(np.array(signals))
		isp2signal[key]= signal
	print "aggerate finished"
	with  open(os.sys.argv[2],'r') as fid:#read isp file
		isp_list = fid.read().split('\n')[0:-1]
	signals = []
	count = 0
	for isp in isp_list:
		isp = isp.replace("''", "'")
		if isp2signal.has_key(isp):
			signals.append(isp2signal[isp])
		else:
			print isp
			count += 1
			signals.append(np.zeros(dim))
	print "miss data" , count
	sio.savemat(os.sys.argv[3], {'signals': signals,'isp': isp_list })
fastrun()
#main()
